generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Project {
  id        Int        @id @default(autoincrement())
  name      String
  date      DateTime   @default(now())
  documents Document[]
}

model Document {
  id          Int     @id @default(autoincrement())
  type        String?
  path        String
  projectId   Int
  category    String?
  subcategory String?
  title       String?
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sheets      Sheet[]
}

model Sheet {
  id               Int               @id @default(autoincrement())
  code             String
  title            String?
  type             String?
  page             Int?
  status           String            @default("not started")
  svgPath          String?
  documentId       Int
  alignmentResults AlignmentResult[]
  boxes            Box[]
  currentDiffs     ComparisonDiff[]  @relation("CurrentSheet")
  originalDiffs    ComparisonDiff[]  @relation("OriginalSheet")
  distances        Distance[]
  references       Reference[]
  document         Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model ComparisonDiff {
  id              Int            @id @default(autoincrement())
  originalSheetId Int
  currentSheetId  Int
  hasAdditions    Boolean        @default(false)
  hasDeletions    Boolean        @default(false)
  originalBbox    String?
  currentBbox     String?
  title           String?
  description     String?
  subContractorId Int?
  status          String         @default("review")
  subContractor   SubContractor? @relation(fields: [subContractorId], references: [id])
  currentSheet    Sheet          @relation("CurrentSheet", fields: [currentSheetId], references: [id], onDelete: Cascade)
  originalSheet   Sheet          @relation("OriginalSheet", fields: [originalSheetId], references: [id], onDelete: Cascade)

  @@unique([originalSheetId, currentSheetId])
}

model SubContractor {
  id              Int              @id @default(autoincrement())
  name            String
  tradeName       String
  comparisonDiffs ComparisonDiff[]
}

model Box {
  id               Int               @id @default(autoincrement())
  code             String
  title            String?
  scale            String?
  content          String?
  coordinates      String
  type             String            @default("figure")
  shape            String            @default("rectangle")
  color            String            @default("#FF5722")
  pageWidth        Int?
  pageHeight       Int?
  userModified     Boolean           @default(false)
  sheetId          Int
  alignmentResults AlignmentResult[]
  sheet            Sheet             @relation(fields: [sheetId], references: [id], onDelete: Cascade)
}

model Reference {
  id          Int    @id @default(autoincrement())
  coordinates String
  code        String
  sheetCode   String
  sheetId     Int
  sheet       Sheet  @relation(fields: [sheetId], references: [id], onDelete: Cascade)
}

model Distance {
  id             Int    @id @default(autoincrement())
  pointA         String
  pointB         String
  length         Float
  pixel_distance Float
  sheetId        Int
  sheet          Sheet  @relation(fields: [sheetId], references: [id], onDelete: Cascade)
}

model AlignmentResult {
  id            Int      @id @default(autoincrement())
  sourceBoxId   Int
  targetSheetId Int
  translationX  Float
  translationY  Float
  scale         Float
  createdAt     DateTime @default(now())
  sourceBox     Box      @relation(fields: [sourceBoxId], references: [id], onDelete: Cascade)
  targetSheet   Sheet    @relation(fields: [targetSheetId], references: [id], onDelete: Cascade)

  @@unique([sourceBoxId, targetSheetId])
}
